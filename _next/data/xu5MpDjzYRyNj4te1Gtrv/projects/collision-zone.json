{"pageProps":{"project":{"id":19,"slug":"collision-zone","assetRoot":"projects/collision-zone","title":"Collision Zone","status":"complete","description":"IO game where you crash trucks into each other","startDate":"2019-06-01T00:00:00.000Z","endDate":"2019-08-30T00:00:00.000Z","url":"https://collision.zone","source":["https://github.com/astralbijection/collision-zone"],"thumbnail":"./thumbnail.gif","content":"<p>An IO game that involves cars crashing into each other. It used to be located at collision.zone, but I have shut it down due to hosting and domain name costs (why are .zone domains $30/yr!?). However, I am considering bringing it back (possibly at collisionzone.astrid.tech?)</p>\n<p>Here’s a GIF of some AIs playing the game against each other!</p>\n<div style=\"width:100%;height:0;padding-bottom:64%;position:relative;\"><iframe src=\"https://giphy.com/embed/ulDFC0vEJQrTLFBO1h\" width=\"100%\" height=\"100%\" style=\"position:absolute\" frameborder=\"0\" class=\"giphy-embed\" allowfullscreen></iframe></div><p>\n</p><h2 id=\"technology-stack\">Technology Stack</h2>\n<h3 id=\"the-site-views\">The site views</h3>\n<ul>\n<li><strong>Instance Server</strong> - A server that runs a single instance of the game. Needs to be fast.\n<ul>\n<li>Language: C++</li>\n<li>Box2D Physics Engine</li>\n<li><a href=\"https://github.com/zaphoyd/websocketpp\">WebsocketPP</a></li>\n</ul>\n</li>\n<li><strong>Matchmaking Server</strong> - Serves the static frontend and performs matchmaking. Speed is not as much of an issue here.\n<ul>\n<li>Language: TypeScript</li>\n<li>Node.js</li>\n<li>Express</li>\n</ul>\n</li>\n<li><strong>Frontend</strong> - Technically part of the matchmaking server project, might consider moving it out for a decoupled frontend architecture.\n<ul>\n<li>Language: TypeScript</li>\n<li><a href=\"https://phaser.io/\">Phaser 3</a> Game Engine</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"languages-the-content-is-written-in\">Languages the content is written in</h3>\n<ul>\n<li>Markdown</li>\n<li>Jupyter notebooks for a few blog posts\n<ul>\n<li><strong>I wrote a custom Gatsby plugin</strong> that transforms the Jupyter notebooks into Markdown files, which theemselves get transformed into blog posts.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"the-protocol\">The Protocol</h2>\n<p>There are three entities at play here:</p>\n<ul>\n<li>The <strong>client</strong>, or the browser that the player is using.</li>\n<li>The <strong>matchmaking server</strong>, a Node.js HTTP server.</li>\n<li>The <strong>instance server</strong>, a C++ server that exposes a <em>spectator socket</em> and a <em>player socket</em>.</li>\n</ul>\n<p>The general high-level flow is as follows:</p>\n<ol>\n<li>\n<p>The client visits collision.zone. The matchmaking server gives the user:</p>\n<ul>\n<li>a HTML page and tells them about what gamemodes are available</li>\n<li>an instance server’s spectator socket to allow the client to see a game without interacting with it.</li>\n</ul>\n</li>\n<li>\n<p>The client begins matchmaking. The matchmaking server puts them in the matchmaking queue.</p>\n</li>\n<li>\n<p>When there is an open instance server, the matchmaking server gives the client that instance server’s player socket, and the client connects to that socket and starts playing.</p>\n</li>\n</ol>\n<p>During gameplay, the instance server’s sockets use a custom binary protocol to send game updates in order to reduce bandwidth as much as humanly possible. See <a href=\"https://github.com/astralbijection/collision-zone/blob/main/GameProtocol.md\">this document</a> for its specification.</p>\n<h2 id=\"fun-facts\">Fun facts!</h2>\n<ul>\n<li>The initial prototype was created during <a href=\"https://github.com/astralbijection/HSHacks-III\">HSHacks III</a> back in 2017 under the name of “High Octane Elastic Snowploughs.” The backend was a Flask site serving a Socket.IO connection, and the frontend drew everything using a basic Canvas API,</li>\n<li>After the hackathon, there were many incomplete rewrites of the project in various languages, including Java and more Python, until eventually I did it again in 2019 using this current stack.</li>\n</ul>","tags":["aws","bootstrap-css","cpp","css","html","javascript","node-js","phaser-js","typescript","website","websockets"]},"similar":[{"slug":"astrid-tech","title":"astrid.tech"},{"slug":"quadfrost-leds","title":"QuadFrost 3D Printer System"},{"slug":"inventree","title":"Inventree"},{"slug":"tanksberry-pi","title":"Tanksberry Pi"},{"slug":"interactive-pid","title":"Interactive PID Simulator"}]},"__N_SSG":true}