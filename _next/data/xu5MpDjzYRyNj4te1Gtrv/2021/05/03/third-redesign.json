{"pageProps":{"post":{"id":1,"assetRoot":"2021/05/03/0","thumbnail":null,"title":"A third redesign?","description":"The grass is always greener on the other side","slug":"third-redesign","date":"2021-05-03T10:17:05.000Z","content":"<p>So we’re already on astrid.tech v2, despite the fact that the footer <em>still</em> says v1. However, I’m feeling like my website is not very flexible anymore, and I want to redesign.</p>\n<p>Why the hell do I want to redesign my website again? There are a couple reasons.</p>\n<ol>\n<li>\n<p><strong>My current setup is inflexible, hacked-together, and shitty.</strong> It would be quite a pain to add a new post type, like a note, recipe, or a RSVP, or other things that <a href=\"https://indieweb.org/posts#Types_of_Posts\">IndieWeb people post</a>.</p>\n</li>\n<li>\n<p><strong>My website is somewhat bloated.</strong> JavaScript makes up a whopping 300 KB of stuff downloaded on the homepage! I want to cut down on that value.</p>\n</li>\n<li>\n<p><strong>I want to connect my website with other services.</strong> For instance, I want to <a href=\"https://indieweb.org/POSSE\">syndicate my posts to Twitter, Mastodon, or other services</a>, and <a href=\"https://indieweb.org/PESOS\">syndicate other data back onto my website</a> automatically, and to do that would require a bunch of additional code. I also want to send and receive webmentions, and in a less-janky way than I have now.</p>\n</li>\n</ol>\n<p>The only question now is, what am I going to use to redesign my website? I have a couple of criteria in considering this.</p>\n<ul>\n<li>I like having my posts and content being markdown files in a Git repository. It makes everything editor-agnostic and <a href=\"https://indieweb.org/database-antipattern\">avoids pitfalls with database storage of posts</a>.</li>\n<li>I like statically-typed languages over dynamically-typed languages.</li>\n<li>I’m interested in trying something new. Maybe a wacky functional or functional-ish language, like Scala, which I’m familiar with, or Haskell or Rust, which I’ve never used before.</li>\n<li>Keeping my 8000 LOC of React would be great, but I may just have to end up throwing it out. Oh well.</li>\n</ul>\n<p>There are a couple of decisions I can make.</p>\n<ul>\n<li><strong>Go fully dynamic.</strong> This would make programming complicated stuff a bit easier, but it would leave my website possibly prone to attacks. I have a couple of options for doing this.\n<ul>\n<li><em>Extend my Python/Django API server.</em> This would be an easy option, but I honestly don’t like Python all that much because it’s a dynamically-typed language.</li>\n<li><em>Extend my Rust/Rocket link shortener.</em> Rust is also pretty cool, though I’m not too familiar with it. I could just build off of my link shortener, though.</li>\n<li><em>Fuck it, brand new server!</em> I could write a new server in Scala. I heard they also improved the compile times since I last used it 6 years ago. It also has pretty good tooling.</li>\n</ul>\n</li>\n<li><strong>Stay with the strange static/dynamic thing.</strong> To receive webmentions and webhooks and comments, after all, I <em>will</em> need a running server.\n<ul>\n<li><em>Go back to Gatsby.</em> It’s an appealing option; Gatsby includes more batteries for blog sites than Next.js. But then again, I do want to try something new.</li>\n<li><em>Write my own static site generator!</em> This has been in the works for a while. I’m experimenting with writing one in Haskell right now. Unfortunately, I’m shit at Haskell, so it’s going about as well as you’d expect.</li>\n</ul>\n</li>\n</ul>\n<p>I think it’s still possible to preserve some of my React libraries and UI, though. I would just serve it as <a href=\"https://reactjs.org/docs/web-components.html\">custom elements</a>.</p>","tags":["/projects/astrid-tech","django","haskell","python","rust","scala","website"]}},"__N_SSG":true}