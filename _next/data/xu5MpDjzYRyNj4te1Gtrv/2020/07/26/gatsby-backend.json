{"pageProps":{"post":{"id":16,"assetRoot":"2020/07/26","thumbnail":null,"title":"An overview of the new Gatsby backend","description":"Come on in, there's digraphs in here","slug":"gatsby-backend","date":"2020-07-26T08:07:00.000Z","content":"<p>One of the big parts of the 0.2 release is a thing that no one will ever get to see directly: The brand new, highly modular backend. This post will likely be highly technical, but if anyone wants to see how it all works inside, this is for you.</p>\n<h2 id=\"a-quick-primer-on-gatsby\">A quick primer on Gatsby</h2>\n<h3 id=\"static-site-generation\">Static Site Generation</h3>\n<p>A static site generator is a program that outputs a website that is completely pre-built. It outputs a big bundle of HTML, CSS, and JS plus media and nothing else. Some examples include <a href=\"https://www.gatsbyjs.org/\">Gatsby</a>, which this site is built on, and <a href=\"https://jekyllrb.com/\">Jekyll</a>, which is one of the more popular ones.</p>\n<p><strong>What’s the point?</strong> Essentially, the reason you would do this instead of making a dynamic site (one where the server renders HTML every request) is because you can host it anywhere without any server-side logic. All you really need is a barebones Apache or Nginx server, or you can be like me and host it on <a href=\"https://pages.github.com/\">GitHub Pages</a>. Because the HTML isn’t changing unlike on a dynamic website, it’s super duper good for browsers, since the browser can just cache all the data and only need to download things once.</p>\n<p><strong>Why would you do this instead of just writing the HTML by hand?</strong> Because writing HTML by hand is repetitive and prone to error, not to mention <em>boring</em>. By using a static site generator, you can do cool things like:</p>\n<ul>\n<li>Write your blog posts in Markdown!</li>\n<li>Write your blog posts as Jupyter notebooks!</li>\n<li>Use YAML to describe certain pieces of content!</li>\n<li>Programmatically link tags to the correct location so you don’t need to do so much copying and pasting of HTML!</li>\n</ul>\n<p>All of this, by the way, is stuff that this site does.</p>\n<p>My <code>create-react-app</code>-based website from the very beginning <em>really wanted to do this!</em> But I don’t think <code>create-react-app</code> was really designed to make static sites. At one point, I was rendering blog posts like this one in the browser, which is obviously a pretty terrible idea.</p>\n<p>Luckily for me, Gatsby exists and it solves all of my problems!</p>\n<h3 id=\"why-gatsby\">Why Gatsby?</h3>\n<p>Gatsby uses React, so it wasn’t too hard to migrate my old stuff over. Additionally it has a pretty cool content sourcing system.</p>\n<ol>\n<li>You have source nodes, like files or remote resources or the time that the website was built</li>\n<li>…that get transformed into other nodes by transformers (for example, <code>gatsby-transformer-remark</code> takes markdown files and spits out <code>MarkdownRemark</code> nodes)</li>\n<li>…and they might get transformed into more nodes (I might take one of those markdown nodes and convert it into a <code>Project</code>)</li>\n<li>…and at the very end, you can create pages from nodes or run GraphQL queries on them.</li>\n</ol>\n<p>When I was first learning it, I was doing a lot of things rather poorly and incorrectly. But after a month of triumphs and mistakes, I’ve learned a lot about the framework, so I was confident enough to rewrite my backend to be better.</p>\n<h2 id=\"the-new-backend\">The new backend</h2>\n<h3 id=\"why-it-was-needed\">Why it was needed</h3>\n<p>Before this refactoring, the backend was spread across a 528-line <code>gatsby-node.js</code> in the root directory and 284 lines of Typescript in <code>src/gatsby</code>. The <code>gatsby-node.js</code> was very hard to maintain, which was why after a certain point I just wrote all new code in Typescript. Even then, I still felt a twinge of pain every time I had to <em>touch</em> anything near the backend.</p>\n<p>Now, the code is spread across 1283 lines of Typescript in 10 highly modular plugins. The line count increase is somewhat misleading, due to me having added a few more features and defined the schema of most of the nodes. However, the other reason it’s bigger is because of Typescript, and the fact that I also defined the types of some of my objects.</p>\n<p>Additionally, all files except for one are under 200 lines, and they’re all in Typescript, making them much easier to work with for me. Whereas before, my code was in a gigantic monolith, now each plugin has its own well-defined, highly-specific focus. Each typescript file is small enough to be easily digestible by my tiny brain. It was super easy to test individual failing plugins because all I had to do was comment out the plugin declaration in <code>gatsby-config.js</code>.</p>\n<h3 id=\"high-level-architectural-overview\">High-level architectural overview</h3>\n<p>Within my <code>plugins/</code> directory, there are 10 plugins and 1 util folder for shared code. Here is what each plugin does:</p>\n<ul>\n<li><code>gatsby-astrid-plugin-blog</code> - Finds blog posts and makes pages for them.</li>\n<li><code>gatsby-astrid-plugin-tagging</code> - Responsible for making it easy to query objects for their tags, and tags for their objects.</li>\n<li><code>gatsby-astrid-transformer-markdown-post</code> - Converts markdown posts in the blog folder into blog post objects.</li>\n<li><code>gatsby-astrid-transformer-notebook-markdown</code> - Converts Jupyter notebooks into Markdown nodes and is responsible for Jupyter notebook posts like <a href=\"/blog/2020-06-18-frequency-shifting\">this one</a>.</li>\n<li><code>gatsby-astrid-source-lang-tags</code> - Responsible for making colorful language tags.</li>\n<li><code>gatsby-astrid-transformer-user-tags</code> - Responsible for “user tags,” or tags whose names and parameters I manually defined. This is why some tags, like React and Gatsby, have colors correctly corresponding to their branding.</li>\n<li><code>gatsby-astrid-transformer-education</code>, <code>gatsby-astrid-transformer-project</code>, <code>gatsby-astrid-transformer-skills</code>, <code>gatsby-astrid-transformer-work</code>, and more to come - The actual content of the site.</li>\n</ul>\n<p>Here is the graph of all the node type transformations my code does.</p>\n<img src=\"/_/2020/07/26/3dafcfeb3458f45cea14e5b197322504f318999a.svg\" title=\"&#x60;dot&#x60; image\">\n<p>It looks pretty complicated, but that’s only because of the sheer quantity of stuff there is. It’s all very wide, but not actually very deep. For example, you may notice some repeated structures here, such as</p>\n<img src=\"/_/2020/07/26/5e6ffc5b1140eb499a0a9d1e27994b5583e6eb42.svg\" title=\"&#x60;dot&#x60; image\">\n<p>This type of structure is used to automatically generate tags out of certain pieces of content. In fact, you can see it in action with this blog post, which is linked to <a href=\"/projects/astrid-tech\">the astrid.tech project</a>.</p>\n<p>Now, Gatsby doesn’t like it when two plugins define and create the same type. However, to get around this, I create a (<code>ProjectTag</code>) with a special mimetype on it (<code>application/prs.astrid-tech-tag</code>) that the tagging plugin detects. The tagging plugin then uses the data in that node to create an actual tag.</p>\n<p>Though it does add some complexity and indirectness, the really nice side effect of this is that I can actually remove some plugins and the site will still work perfectly, as if nothing was changed.</p>\n<h2 id=\"conclusion\">Conclusion</h2>\n<p>In this post, we examined the high-level architecture of the new backend. In future posts, we will take a look at some of the individual plugins, and how they work.</p>","tags":["/projects/astrid-tech/","gatsby-js","graphviz"]}},"__N_SSG":true}